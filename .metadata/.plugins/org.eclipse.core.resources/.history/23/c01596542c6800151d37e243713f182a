package project.servlets;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

import javax.ejb.EJB;
import javax.naming.InitialContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import project.business.StockBeanLocal;
import project.entity.Stock;
import project.feed.LiveFeed;
import project.strategies.TwoMovingAverage;

/**
 * Servlet implementation class DatabaseServlet
 */
@WebServlet("/DatabaseServlet")
@EJB(name="ejb/Stock", beanInterface=StockBeanLocal.class)
public class DatabaseServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public DatabaseServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.setContentType("text/html;charset=UTF-8");
		PrintWriter out = response.getWriter();
		
		try {
			InitialContext context = new InitialContext();
			StockBeanLocal bean = (StockBeanLocal)context.lookup("java:comp/env/ejb/Stock");
			Stock s;
			
			bean.clearStock();
			
			//Set start time of the application
			long startTime = System.currentTimeMillis();
			long lastCall = 0;
			int shortTime = 1;
			int longTime = 2;
			String[] stocks = {"MSFT", "AAPL", "CSCO", "IBM"};
			TwoMovingAverage twoMAvg = new TwoMovingAverage("MSFT", shortTime, longTime);
			while(true) {
				for(int i=0;i<stocks.length;i++) {
					String[] fields = LiveFeed.runLiveFeed(stocks[i]);
					fields[0] = fields[0].replace("\"", "");
		        	
		        	String symbol = fields[0];
		        	double bidPrice = Double.parseDouble(fields[1]);
		        	double askPrice = Double.parseDouble(fields[2]);
		        	
		        	//Round data to two decimal places
		        	double high = Math.round(Double.parseDouble(fields[3]) * 100.0)/100.0;
		        	double low = Math.round(Double.parseDouble(fields[4]) * 100.0)/100.0;
		        	double open = Math.round(Double.parseDouble(fields[5]) * 100.0)/100.0;
		        	double close = Math.round(Double.parseDouble(fields[6]) * 100.0)/100.0;
		        	
		        	s = new Stock(symbol, bidPrice, askPrice, high, low, open, close);
			        
			        twoMAvg.calcMovingAverage(s, startTime);
			        
			        bean.saveStock(s);
				}
		        
		        List<Double> shortP = twoMAvg.getShortPrices();
		        List<Double> longP = twoMAvg.getLongPrices();
		        
		        double recentShort = shortP.get(shortP.size() - 1);
		        double recentLong = longP.get(longP.size() - 1);
		        
		        if(recentShort > recentLong) {
		        	System.out.println("BUY");
		        } else if(recentShort < recentLong) {
		        	System.out.println("SELL");
		        }
			}
			
		} catch(Exception ex) {
			out.println("Exception occurred: " + ex.getMessage());
		}
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
